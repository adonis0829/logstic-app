// <auto-generated />
using System;
using Logistics.Infrastructure.EF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Logistics.Infrastructure.EF.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    partial class TenantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.EmployeeTenantRole", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoles", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Load", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedDispatcherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedTruckId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanConfirmDelivery")
                        .HasColumnType("bit");

                    b.Property<bool>("CanConfirmPickUp")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DeliveryCost")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DestinationAddressLat")
                        .HasColumnType("float");

                    b.Property<double?>("DestinationAddressLong")
                        .HasColumnType("float");

                    b.Property<DateTime>("DispatchedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("OriginAddressLat")
                        .HasColumnType("float");

                    b.Property<double?>("OriginAddressLong")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RefId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedDispatcherId");

                    b.HasIndex("AssignedTruckId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RefId")
                        .IsUnique();

                    b.ToTable("Loads", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRoleClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DriverIncomePercentage")
                        .HasColumnType("real");

                    b.Property<string>("LastKnownLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("LastKnownLocationLat")
                        .HasColumnType("float");

                    b.Property<double?>("LastKnownLocationLong")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trucks", (string)null);
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Truck", "Truck")
                        .WithMany("Drivers")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.EmployeeTenantRole", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Domain.Entities.TenantRole", "Role")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Load", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.Employee", "AssignedDispatcher")
                        .WithMany("DispatchedLoads")
                        .HasForeignKey("AssignedDispatcherId");

                    b.HasOne("Logistics.Domain.Entities.Truck", "AssignedTruck")
                        .WithMany("Loads")
                        .HasForeignKey("AssignedTruckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Logistics.Domain.Entities.Employee", null)
                        .WithMany("DeliveredLoads")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("AssignedDispatcher");

                    b.Navigation("AssignedTruck");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRoleClaim", b =>
                {
                    b.HasOne("Logistics.Domain.Entities.TenantRole", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Employee", b =>
                {
                    b.Navigation("DeliveredLoads");

                    b.Navigation("DispatchedLoads");

                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.TenantRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("Logistics.Domain.Entities.Truck", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Loads");
                });
#pragma warning restore 612, 618
        }
    }
}
